---
- name: Avi Controller | KVM | Requirements | Check variables
  assert:
    that:
      - "{{ item }} != None"
    msg: "{{ item }} must be provided"
  with_items:
    - kvm_host_ip
    - kvm_vm_hostname
    - kvm_host_username
    - kvm_host_password
    - ctrl_mgmt_ip
    - ctrl_mgmt_mask
    - ctrl_default_gw
    - kvm_host_mgmt_intf

- name: "Avi Controller | KVM | Set the location of cloud image"
  set_fact:
    IMAGE: "/var/lib/libvirt/images/controller.qcow2"

- name: "Avi Controller | KVM | Copy controller.qcow2 file into /var/lib/libvirt/images/ from Kvm Host"
  copy:
    src: /root/controller.qcow2
    dest: /var/lib/libvirt/images/controller.qcow2
    remote_src: yes
    owner: root
  when: kvm_vm_base_img is undefined

- name: "Avi Controller | KVM | Copy controller.qcow2 file into /var/lib/libvirt/images/ from local"
  copy:
    src: "{{ kvm_vm_base_img }}"
    dest: "{{ IMAGE }}"
    remote_src: no
    owner: root
  when: kvm_vm_base_img is defined

- name: "Avi Controller | KVM | Create directory {{ kvm_vm_hostname }} on KVM host"
  file:
    path: /root/{{ kvm_vm_hostname }}
    state: directory

- name: "Avi Controller | KVM | Generate meta-data config file for VM on KVM host"
  template:
    src: avi_meta-data-controller.j2
    dest: /root/{{ kvm_vm_hostname }}/avi_meta-data

- name: "Avi Controller | KVM | Generate user-data config file for VM on KVM host"
  template:
    src: user-data.j2
    dest: /root/{{ kvm_vm_hostname }}/user-data

- name: "Avi Controller | KVM | Set the location of USER DATA file"
  set_fact:
    AVI_USER_DATA: /root/{{ kvm_vm_hostname }}/user-data

- name: "Avi Controller | KVM | Set the location of META DATA file"
  set_fact:
    AVI_META_DATA: /root/{{ kvm_vm_hostname }}/avi_meta-data

- name: "Avi Controller | KVM | Create CD-ROM ISO with cloud-init config"
  command: >
    genisoimage -output {{ CI_ISO }} -volid cidata -joliet -r {{ AVI_USER_DATA }} {{ AVI_META_DATA }}

- name: Get Os Version
  shell: hostnamectl | grep 'Operating System'
  register: os_version

- name: "Avi Controller | KVM | Deploy Controller | Run if os_version is 17.04 OR OS is CentOS AND pinning is Yes"
  command: >
    virt-install --import --name {{ kvm_vm_hostname }} --ram {{ kvm_vm_ram }} --vcpus {{ kvm_vm_vcpus }} --disk {{ IMAGE }},format=qcow2,bus=virtio --disk {{ CI_ISO }},device=cdrom --network type=direct,source={{ kvm_host_mgmt_intf }},source_mode=bridge,model=virtio --os-type=linux --os-variant=ubuntu16.04 --cpuset=auto --noautoconsole
  register: vm_xml_content
  when: '"17.04" in os_version.stdout or "CentOS" in os_version.stdout and kvm_pinning'

- name: "Avi Controller | KVM | Deploy Controller | Run if os_version is 16.04 AND pinning is Yes"
  command: >
    virt-install --import --name {{ kvm_vm_hostname }} --ram {{ kvm_vm_ram }} --vcpus {{ kvm_vm_vcpus }} --disk {{ IMAGE }},format=qcow2,bus=virtio --disk {{ CI_ISO }},device=cdrom --network type=direct,source={{ kvm_host_mgmt_intf }},source_mode=bridge,model=virtio --os-type=linux --os-variant=ubuntu16.04 --cpuset=auto --disk size={{ kvm_vm_os_disk_size }} --noautoconsole
  register: vm_xml_content
  when: '"16.04" in os_version.stdout and kvm_pinning'

- name: "Avi Controller | KVM | Deploy Controller | Run if pinning is False"
  command: >
    virt-install --import --name {{ kvm_vm_hostname }} --ram {{ kvm_vm_ram }} --vcpus {{ kvm_vm_vcpus }} --disk {{ IMAGE }},format=qcow2,bus=virtio --disk {{ CI_ISO }},device=cdrom --network type=direct,source={{ kvm_host_mgmt_intf }},source_mode=bridge,model=virtio --os-type=linux --os-variant=ubuntu16.04 --disk size={{ kvm_vm_os_disk_size }} --noautoconsole
  register: vm_xml_content
  when: not kvm_pinning

- name: "Avi Controller | KVM | Eject CDROM"
  command: >
    virsh change-media {{ kvm_vm_hostname }} hda --eject --config

- name: "Avi Controller | KVM | Remove CI_ISO and Host files."
  command: "rm -rf {{ CI_ISO }} /root/{{ kvm_vm_hostname }}"
